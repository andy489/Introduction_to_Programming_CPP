   • PRIMITIVE DATA TYPES;
   • CONDITIONAL STATEMENTS (if, else/switch);
   • LOOPS (for/while);
   • ARRAYS;
   • MATRICES;
   • FUNCTIONS AND RECURSION;
   • STRINGS; 
   • COMPLEX TASKS;

1. Write a program which initializes 2 variables and then swaps their values.

2. Write a program which calculates the arithmetic mean of the digits of a given integer long long number, formatted to the second 
   digit after the decimal point.

3. Write a function with signature bool checkDate(const char* text), which verifies if the input parameter is a correct date in 
   DD.MM format. Do not use string.
   
4. Write a function which checks whether a string is а substring in another string. If true, the functions must return the index 
   to the first position the substring is located in the string, else return -1.
   
5. Write a function with signature int digitPos(long long num, int k), which returns the k-th digit of the number num or -1 if 
   such position does not exist. It starts counting from left to right and from 1. For example - digitPos(1234, 3) returns 3.
   
6. Write a function with signature void revert(char* text), which converts the given string as a parameter, replacing all 
   lowercase Latin alphabet with uppercase and reverse. Do not use the built-in string library.
   
7. Write a function with signature double sqrt_x(double x, double eps), which calculates a square root of x with an epsilon (eps) 
   precision.
   
8. Write a function which by a given real number x and a non-negative integer n returns x raised to the n-th power. Use Karatsuba
   multiplication method (recursion).

9. Write a function which counts words in char* text. A "word" is defined to be a single or a sequence of characters diferent from 
   ' ', '\t', '\n'. If the array of characters is empty, the function must return -1.
   
10. Write a program which asks the user for a long long number and then prints:
    ∘ the same number in binary;
    ∘ the same number in oct;
    ∘ the same number in hex.
