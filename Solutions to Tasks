//Task 1
#include <iostream>

void swap(int& a, int& b)
{
	int temp = a;
	a = b;
	b = temp;
}
int main()
{
	int a, b;
	std::cin >> a >> b;

	std::cout << a << ", " << b << "\n";
	swap(a, b);
	std::cout << a << ", " << b << "\n";
	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
//Task 2
#include <iostream>

long long absVal(long long a)
{
	return a < 0 ? -a : a;
}
int main()
{
	long long n;
	std::cin >> n;
	size_t count = (size_t)log10(absVal(n)) + 1;
	std::cout << count;
	return 0;
}
//second way
#include <iostream>

int main()
{
	long long n;
	std::cin >> n;
	size_t count = 0;
	
	while (n != 0)
	{		
		n /= 10;
		count++;
	}
	std::cout << count;
	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
//Task 3
#include <iostream>

size_t myStrLen(const char* str)
{
	size_t len;
	for (len = 0; str[len] != '\0'; len++) {}
	return len;
}

bool isDigit(const char symbol)
{
	return (symbol >= '0' && symbol <= '9');
}

bool checkDate(const char* text)
{
	size_t len = myStrLen(text);
	if (len != 5) return false;
	if (!isDigit(text[0]) || !isDigit(text[1])) return false;
	if (text[2] != '.') return false;
	if (!isDigit(text[3]) || !isDigit(text[4])) return false;

	size_t days = (text[0] - '0') * 10 + text[1] - '0';
	size_t months = ((text[3] - '0') * 10 + text[4] - '0');
	if (months < 1 || months>12) return false;
	size_t maxDaysPerMonth[] =
	{
		0,
		31, 29, 31, 30, 31, 30,
		31, 31, 30, 31, 30, 31
	};
	return days <= maxDaysPerMonth[months];
}

int main()
{
	const char* str1 = "22.12";
	const char* str2 = "31.02";
		
	std::cout << checkDate(str1)<<std::endl;
	std::cout << checkDate(str2) << std::endl;

	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
//Task 4
#include <iostream> 

size_t strLen(const char* text)
{
	size_t len;
	for (len = 0; text[len] != '\0'; len++) {}
	return len;
}

int subString(const char* subStr, const char* str)
{
	size_t lenSubStr = strLen(subStr);
	size_t lenStr = strLen(str);
	if (lenSubStr > lenStr) return -1;

	for (size_t i = 0; i <= lenStr - lenSubStr; i++) {
		size_t j;
		/* For current index i, check for pattern match */
		for (j = 0; j < lenSubStr; j++)
			if (str[i + j] != subStr[j])
				break;
		if (j == lenSubStr)
			return i;
	}
	return -1;
}

int main()
{
	const char* s1 = "hub";
	const char* s2 = "www.github.com";
	int res = subString(s1, s2);
	if (res == -1) std::cout << "Not present";
	else std::cout << "Present at index " << res;
	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
//Task 5
#include <iostream>

size_t numLen(long long num)
{
	size_t len = size_t(floor(log10(abs(num)))) + 1;
	return len;
}

int digitPos(long long num, int k)
{
	int len = numLen(num);
	num = abs(num);
	int endCycle = len - k;
	int digit = -1;
	if (k > len || k < 1) return -1;
	for (int i = len - 1; i >= endCycle; i--)
	{
		digit = (size_t)(num / pow(10, i));
		long long denom = (long long)(pow(10, len - 1));
		num = num % denom;
		len--;
	}
	return digit;
}

int main()
{
	long long n;
	std::cin >> n;
	for (size_t i = 1; i <= numLen(n); i++) std::cout << digitPos(n, i) << std::endl;
	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
