//Task 1  
#include <iostream>

int myAbs(int num) 
{
	int	absValue;
	absValue = (num >= 0) ? num : -num;
	return absValue;
}
int main()
{
	short input; int minNumber, maxNumber, diff, count, flag;
	minNumber = INT_MAX;
	maxNumber = 0; // no need to take INT_MIN, because if input < 0 it will stop the program;

	count = 0;
	flag = 0;
	std::cout << "Enter an integer number: " << std::endl;;
	while (!(std::cin >> input))
	{
		std::cin.clear(); // reset input
		while (std::cin.get() != '\n') continue; // get rid of bad input
		std::cout << "This input does not work. Enter an integer number in range: " << std::endl;
	}
	while (true)
	{
		if (input >= 0)
		{
			if (input > maxNumber) maxNumber = input;
			if (input < minNumber) minNumber = input;
			count++;
		}
		if (input < 0 && count < 2)
		{
			std::cout << "ERROR! You must enter at least two natural numbers.";
			flag = 2018;
			break;
		}
		else if (input < 0 && count >= 2) break;
		std::cout << "Enter another one: " << std::endl;
		while (!(std::cin >> input))
		{
			std::cin.clear();
			while (std::cin.get() != '\n') continue; 
			std::cout << "This input does not work. Enter an integer number in range: " << std::endl;
		}
	}
	if (flag != 2018)
	{
		diff = minNumber - maxNumber;
		std::cout << "The absolute difference between the smallest and the largest entered numbers is: " << myAbs(diff) << '.';
	}
	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
//Task 2
#include <iostream>

int SafelyInputDigit(int lowerBound, int upperBound)
{
	int number;
	bool check;
	do 
	{
		check = false;
		std::cout << "Enter a digit: " << std::endl;
		std::cin >> number;

		if (std::cin.fail())
		{
			std::cin.clear();
			std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			check = true;
			continue;
		}
	} while (((number < lowerBound) || (number > upperBound)) || check);

	return number;
}
int main()
{
	int number;
	short digit;
	std::cout << "Enter an integer number: " << std::endl;

	while (!(std::cin >> number))
	{
		std::cin.clear(); // reset input
		while (std::cin.get() != '\n') continue; // get rid of bad input
		std::cout << "Please enter an integer number, that works: " << std::endl;
	}
	int num = number;

	digit = SafelyInputDigit(0, 9);

	int counter = 0;

	while (number != 0)
	{
		if (number % 10 == digit) counter++;
		number /= 10;
	}
	if (counter == 0) std::cout << "Number " << num << " has no digit " << digit << " in it.";
	else if (counter == 1) std::cout << "Number " << num << " has only one digit " << digit << " in it.";
	else std::cout << "Number " << num << " has " << counter << " times the digit " << digit << " in it.";
	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
